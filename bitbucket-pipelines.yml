image: golang:latest

deps: &deps
    step:
        name: Dependencies
        services:
            - docker
        script:
            # Prepare the environment
            - echo -e "machine bitbucket.org\nlogin ${BITBUCKET_CLONE_USERNAME}\npassword ${BITBUCKET_CLONE_PASSWORD}\n" > ~/.netrc && chmod 600 ~/.netrc
            - curl -u "${PAC_LOGIN}:${PAC_TOKEN}" https://packages.atlassian.com/api/npm/atlassian-npm/auth/atlassian > ~/.npmrc
            - export PATH="${GOPATH}/bin:$PATH" SRCDIR="${GOPATH}/src/bitbucket.org/asecurityteam/sdcli"
            - mkdir -p "${GOPATH}/bin" "${GOPATH}/src/bitbucket.org/asecurityteam" && ln -s "${BITBUCKET_CLONE_DIR}" "${SRCDIR}" && cd "${SRCDIR}"

            # Download and install all dependencies
            - make dep
        artifacts:
            - vendor/**

lint: &lint
    step:
        name: Linting
        services:
            - docker
        script:
            # Prepare the environment
            - echo -e "machine bitbucket.org\nlogin ${BITBUCKET_CLONE_USERNAME}\npassword ${BITBUCKET_CLONE_PASSWORD}\n" > ~/.netrc && chmod 600 ~/.netrc
            - curl -u "${PAC_LOGIN}:${PAC_TOKEN}" https://packages.atlassian.com/api/npm/atlassian-npm/auth/atlassian > ~/.npmrc
            - export PATH="${GOPATH}/bin:$PATH" SRCDIR="${GOPATH}/src/bitbucket.org/asecurityteam/sdcli"
            - mkdir -p "${GOPATH}/bin" "${GOPATH}/src/bitbucket.org/asecurityteam" && ln -s "${BITBUCKET_CLONE_DIR}" "${SRCDIR}" && cd "${SRCDIR}"

            # Lint
            - make lint

test: &test
    step:
        name: Tests
        services:
            - docker
        script:
            # Prepare the environment
            - echo -e "machine bitbucket.org\nlogin ${BITBUCKET_CLONE_USERNAME}\npassword ${BITBUCKET_CLONE_PASSWORD}\n" > ~/.netrc && chmod 600 ~/.netrc
            - curl -u "${PAC_LOGIN}:${PAC_TOKEN}" https://packages.atlassian.com/api/npm/atlassian-npm/auth/atlassian > ~/.npmrc
            - export PATH="${GOPATH}/bin:$PATH" SRCDIR="${GOPATH}/src/bitbucket.org/asecurityteam/sdcli"
            - mkdir -p "${GOPATH}/bin" "${GOPATH}/src/bitbucket.org/asecurityteam" && ln -s "${BITBUCKET_CLONE_DIR}" "${SRCDIR}" && cd "${SRCDIR}"

            # Run the tests
            - make test
        artifacts:
            - .coverage/unit.cover.out

integration: &integration
    step:
        name: Integration
        services:
            - docker
        script:
            # Prepare the environment
            - echo -e "machine bitbucket.org\nlogin ${BITBUCKET_CLONE_USERNAME}\npassword ${BITBUCKET_CLONE_PASSWORD}\n" > ~/.netrc && chmod 600 ~/.netrc
            - curl -u "${PAC_LOGIN}:${PAC_TOKEN}" https://packages.atlassian.com/api/npm/atlassian-npm/auth/atlassian > ~/.npmrc
            - export PATH="${GOPATH}/bin:$PATH" SRCDIR="${GOPATH}/src/bitbucket.org/asecurityteam/sdcli"
            - mkdir -p "${GOPATH}/bin" "${GOPATH}/src/bitbucket.org/asecurityteam" && ln -s "${BITBUCKET_CLONE_DIR}" "${SRCDIR}" && cd "${SRCDIR}"

            # Run the integration tests
            - make integration
        artifacts:
            - .coverage/integration.cover.out

coverage: &coverage
    step:
        name: Coverage
        services:
            - docker
        script:
            # Prepare the environment
            - echo -e "machine bitbucket.org\nlogin ${BITBUCKET_CLONE_USERNAME}\npassword ${BITBUCKET_CLONE_PASSWORD}\n" > ~/.netrc && chmod 600 ~/.netrc
            - curl -u "${PAC_LOGIN}:${PAC_TOKEN}" https://packages.atlassian.com/api/npm/atlassian-npm/auth/atlassian > ~/.npmrc
            - export PATH="${GOPATH}/bin:$PATH" SRCDIR="${GOPATH}/src/bitbucket.org/asecurityteam/sdcli"
            - mkdir -p "${GOPATH}/bin" "${GOPATH}/src/bitbucket.org/asecurityteam" && ln -s "${BITBUCKET_CLONE_DIR}" "${SRCDIR}" && cd "${SRCDIR}"

            # Create coverage report
            - make coverage

            # Upload coverage to codecov
            - bash <(curl -s https://codecov.io/bash) -t "${CODECOV_REPO_TOKEN}" -r "${BITBUCKET_REPO_OWNER}/${BITBUCKET_REPO_SLUG}" -C "${BITBUCKET_COMMIT}" -B "${BITBUCKET_BRANCH}" -f .coverage/combined.cover.out

deploy-dev: &deploy-dev
    step:
        name: "Deploy to dev"
        deployment: test
        services:
            - docker
        script:
            # Prepare the environment
            - echo -e "machine bitbucket.org\nlogin ${BITBUCKET_CLONE_USERNAME}\npassword ${BITBUCKET_CLONE_PASSWORD}\n" > ~/.netrc && chmod 600 ~/.netrc
            - curl -u "${PAC_LOGIN}:${PAC_TOKEN}" https://packages.atlassian.com/api/npm/atlassian-npm/auth/atlassian > ~/.npmrc
            - export PATH="${GOPATH}/bin:$PATH" SRCDIR="${GOPATH}/src/bitbucket.org/asecurityteam/sdcli"
            - mkdir -p "${GOPATH}/bin" "${GOPATH}/src/bitbucket.org/asecurityteam" && ln -s "${BITBUCKET_CLONE_DIR}" "${SRCDIR}" && cd "${SRCDIR}"

            # Build and deploy the image
            - export MICROS_TOKEN="${MICROS_DEPLOY_TOKEN}:${PIPELINES_JWT_TOKEN}" MICROS_URL="wss://micros-proxy.services.atlassian.com"
            - make ENVIRON=dev MICROS_PWD=${PIPELINES_JWT_TOKEN} REGISTRY_USER=${BITBUCKET_CLONE_USERNAME} REGISTRY_PWD=${PIPELINES_JWT_TOKEN} REGISTRY=docker-proxy.services.atlassian.com deploy

deploy-dev-manual: &deploy-dev-manual
    step:
        name: "Deploy to dev"
        deployment: test
        trigger: manual
        services:
            - docker
        script:
            # Prepare the environment
            - echo -e "machine bitbucket.org\nlogin ${BITBUCKET_CLONE_USERNAME}\npassword ${BITBUCKET_CLONE_PASSWORD}\n" > ~/.netrc && chmod 600 ~/.netrc
            - curl -u "${PAC_LOGIN}:${PAC_TOKEN}" https://packages.atlassian.com/api/npm/atlassian-npm/auth/atlassian > ~/.npmrc
            - export PATH="${GOPATH}/bin:$PATH" SRCDIR="${GOPATH}/src/bitbucket.org/asecurityteam/sdcli"
            - mkdir -p "${GOPATH}/bin" "${GOPATH}/src/bitbucket.org/asecurityteam" && ln -s "${BITBUCKET_CLONE_DIR}" "${SRCDIR}" && cd "${SRCDIR}"

            # Build and deploy the image
            - export MICROS_TOKEN="${MICROS_DEPLOY_TOKEN}:${PIPELINES_JWT_TOKEN}" MICROS_URL="wss://micros-proxy.services.atlassian.com"
            - make ENVIRON=dev MICROS_PWD=${PIPELINES_JWT_TOKEN} REGISTRY_USER=${BITBUCKET_CLONE_USERNAME} REGISTRY_PWD=${PIPELINES_JWT_TOKEN} REGISTRY=docker-proxy.services.atlassian.com deploy

deploy-prod: &deploy-prod
    step:
        name: "Deploy to production"
        deployment: production
        trigger: manual
        services:
            - docker
        script:
            # Prepare the environment
            - echo -e "machine bitbucket.org\nlogin ${BITBUCKET_CLONE_USERNAME}\npassword ${BITBUCKET_CLONE_PASSWORD}\n" > ~/.netrc && chmod 600 ~/.netrc
            - curl -u "${PAC_LOGIN}:${PAC_TOKEN}" https://packages.atlassian.com/api/npm/atlassian-npm/auth/atlassian > ~/.npmrc
            - export PATH="${GOPATH}/bin:$PATH" SRCDIR="${GOPATH}/src/bitbucket.org/asecurityteam/sdcli"
            - mkdir -p "${GOPATH}/bin" "${GOPATH}/src/bitbucket.org/asecurityteam" && ln -s "${BITBUCKET_CLONE_DIR}" "${SRCDIR}" && cd "${SRCDIR}"

            # Build and deploy the image
            - export MICROS_TOKEN="${MICROS_DEPLOY_TOKEN}:${PIPELINES_JWT_TOKEN}" MICROS_URL="wss://micros-proxy.services.atlassian.com"
            - make ENVIRON=prod MICROS_PWD=${PIPELINES_JWT_TOKEN} REGISTRY_USER=sox REGISTRY_PWD=${PIPELINES_JWT_TOKEN} REGISTRY=docker-proxy.services.atlassian.com deploy


pipelines:
    branches:
        master:
            - <<: *deps
            - parallel:
                - <<: *lint
                - <<: *test
                - <<: *integration
            - <<: *coverage
            - <<: *deploy-dev
            - <<: *deploy-prod
    default:
        - <<: *deps
        - parallel:
            - <<: *lint
            - <<: *test
            - <<: *integration
        - <<: *coverage
        - <<: *deploy-dev-manual
